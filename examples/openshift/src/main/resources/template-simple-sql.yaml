# This example template deploys Registry with an edge-terminated HTTPS route, with a custom domain
# and Let's Encrypt certificate using cert-manager operator.
#
# Steps:
#
# 1. Create or select a namespace:
#
# oc new-project test
#
# 2. Install the operator(s):
#
#  - Red Hat Integration - Service Registry Operator
#  - cert-manager Operator for Red Hat OpenShift
#
# 3. Provision a custom domain, and add a CNAME DNS record referencing the ${INGRESS_ROUTER_CANONICAL_HOSTNAME}
# (see the bottom of the file) of your cluster:
#
# Name      TTL      Type      Data
# test      300      CNAME     router-default.apps.apicur.eastus.aroapp.io
#
# Wait for the DNS changes to propagate.
#
# 4. Apply the template:
#
# oc process -f registry-certmanager-letsencrypt-custom-domain-edge.yaml \
#  -p NAMESPACE=test \
#  -p INGRESS_ROUTER_CANONICAL_HOSTNAME=router-default.apps.apicur.eastus.aroapp.io \
#  -p CUSTOM_DOMAIN=test.jsenko.net \
#  | oc apply -f - && oc wait --for=condition=ready apicurioregistry registry-certmanager-letsencrypt-custom-domain-edge --timeout=120s
#
# It may take a few minutes until the certificate has been issued.
#
# IMPORTANT NOTES:
#
# 1. Before you apply the template, make sure the ingress/route hostname will be shorter than 64 characters, due to this limitation
# https://community.letsencrypt.org/t/a-certificate-for-a-63-character-domain/78870 .
#
# 2. By default, this template uses the staging Let's Encrypt issuer, suitable for testing (see https://letsencrypt.org/docs/rate-limits/).
# You can try the letsencrypt-production-cluster-issuer instead.
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: apicurio-studio-simple-sql
labels:
  template: apicurio-studio-simple-sql
objects:

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: postgresql
      namespace: ${NAMESPACE}
      labels:
        app: postgresql
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: postgresql
      template:
        metadata:
          labels:
            app: postgresql
        spec:
          containers:
            - name: postgresql
              image: postgres
              env:
                - name: POSTGRES_ADMIN_PASSWORD
                  value: admin # TODO: Change me!
                - name: POSTGRES_PASSWORD
                  value: password # TODO: Change me!
                - name: POSTGRES_DB
                  value: apicurio-studio
                - name: POSTGRES_USER
                  value: apicurio-studio
                - name: PGDATA
                  value: /postgresql/data
              ports:
                - name: postgresql
                  containerPort: 5432
                  protocol: TCP
              readinessProbe:
                tcpSocket:
                  port: 5432
              livenessProbe:
                tcpSocket:
                  port: 5432
              volumeMounts:
                - name: postgresql
                  mountPath: /postgresql
          volumes:
            - name: postgresql
              emptyDir: { }

  - apiVersion: v1
    kind: Service
    metadata:
      name: postgresql
      namespace: ${NAMESPACE}
      labels:
        app: postgresql
    spec:
      selector:
        app: postgresql
      ports:
        - name: postgresql
          port: 5432
          protocol: TCP
          targetPort: 5432

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: apicurio-studio-app
      namespace: ${NAMESPACE}
      labels:
        app: apicurio-studio
        component: apicurio-studio-app
    spec:
      replicas: 1
      selector:
        matchLabels:
          component: apicurio-studio-app
      template:
        metadata:
          labels:
            app: apicurio-studio
            component: apicurio-studio-app
        spec:
          containers:
            - name: apicurio-studio-app
              image: quay.io/apicurio/apicurio-studio:latest-snapshot
              env:
                - name: QUARKUS_PROFILE
                  value: prod
                - name: QUARKUS_HTTP_ACCESS_LOG_ENABLED
                  value: 'true'
                - name: QUARKUS_HTTP_CORS_ORIGINS
                  value: '*'

                - name: APICURIO_LOG_LEVEL
                  value: DEBUG

                - name: APICURIO_STORAGE_DB_KIND
                  value: postgresql
                - name: APICURIO_DATASOURCE_URL
                  value: jdbc:postgresql://postgresql:5432/apicurio-studio
                - name: APICURIO_DATASOURCE_USERNAME
                  value: apicurio-studio
                - name: APICURIO_DATASOURCE_PASSWORD
                  value: password
              ports:
                - name: http
                  containerPort: 8080
                  protocol: TCP
              resources:
                requests:
                  cpu: 200m
                  memory: 500Mi
                limits:
                  cpu: 500m
                  memory: 1000Mi
              livenessProbe:
                httpGet:
                  path: /apis/studio/v1/system/info
                  port: 8080
                  scheme: HTTP
              readinessProbe:
                httpGet:
                  path: /apis/studio/v1/system/info
                  port: 8080
                  scheme: HTTP

  - apiVersion: v1
    kind: Service
    metadata:
      name: apicurio-studio-app
      namespace: ${NAMESPACE}
      labels:
        app: apicurio-studio
    spec:
      selector:
        component: apicurio-studio-app
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: http

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: apicurio-studio-app
      namespace: ${NAMESPACE}
      labels:
        app: apicurio-studio
    spec:
      to:
        kind: Service
        name: apicurio-studio-app
        weight: 100
      wildcardPolicy: None

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: apicurio-studio-ui
      namespace: ${NAMESPACE}
      labels:
        app: apicurio-studio
        component: apicurio-studio-ui
    spec:
      replicas: 1
      selector:
        matchLabels:
          component: apicurio-studio-ui
      template:
        metadata:
          labels:
            app: apicurio-studio
            component: apicurio-studio-ui
        spec:
          containers:
            - name: apicurio-studio-ui
              image: quay.io/apicurio/apicurio-studio-ui:latest-snapshot
              env:
                - name: APICURIO_STUDIO_API_URL
                  value: http://apicurio-studio-app-${NAMESPACE}.${INGRESS_ROUTER_CANONICAL_HOSTNAME}/apis/studio/v1
              ports:
                - name: http
                  containerPort: 8080
                  protocol: TCP
              resources:
                requests:
                  cpu: 100m
                  memory: 250Mi
                limits:
                  cpu: 200m
                  memory: 500Mi
              livenessProbe:
                httpGet:
                  path: /config.js
                  port: 8080
                  scheme: HTTP
              readinessProbe:
                httpGet:
                  path: /config.js
                  port: 8080
                  scheme: HTTP

  - apiVersion: v1
    kind: Service
    metadata:
      name: apicurio-studio-ui
      namespace: ${NAMESPACE}
      labels:
        app: apicurio-studio
    spec:
      selector:
        component: apicurio-studio-ui
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: http

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: apicurio-studio
      name: apicurio-studio-ui
      namespace: ${NAMESPACE}
    spec:
      to:
        kind: Service
        name: apicurio-studio-ui
        weight: 100
      wildcardPolicy: None

parameters:
  - name: NAMESPACE
    required: true
  - name: INGRESS_ROUTER_CANONICAL_HOSTNAME
    # Update this value with your clusters ingress router canonical hostname. For example:
    # apps.apicur.io
    required: true
